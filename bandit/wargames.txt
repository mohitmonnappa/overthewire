level1
to display contents of a dashed file:
cat < - or cat ./-

extra: to create a dashed file:
touch ./-


level2
for spaces in the filename, enclose it with quotes


level3
use ls -la to show all files including hidden ones


level4
basic: cat the entire directory because only one file is human readable

to find which file has ascii text in the entire directory: find all files and pipe it to file. 
we've to use xargs before file. this will give the info about the files
then we can use grep "ASCII" to filter out human readable files



level5
basic: find the entire directory with size parameter set to 1033 bytes, then pip it to
file which checks for dashed file using -- and then pipe it to grep for ascii text

it works only with the file size that is find . -size 1033c (bytes is represented as c)

full command:
find . -size 1033c | xargs file -- * | grep  "ASCII"


level6
basic: go to root directory and find the entire directory with -group, -user and -size
pipe it to file and pipe it to grep to ascii text
full command:
find . -group bandit6 -user bandit7 -size 33c -type f | xargs file * | grep "ASCII"


level7
just cat the file and pass it to grep with the word millionth
cat data.txt | grep "millionth"


level8
use sort to sort the words in dictionary order so that repeated words will be together
next use uniq to see the unique lines and count the number of words
uniq -u will directly give the unique word in the file
or you can display the count and grep 1 from there

simplest: 
cat data.txt | sort -f -d | uniq -u
-f is to ignore the case of the letter and -d is for dictionary ordering

second method:
cat data.txt | sort -f -d | uniq -c | grep " 1 "
-c is to display the count, ie no of times it has been repeated


level9
use strings to print human readable content from a file and pass it to grep with "=="(2 equals signs since a few is more that 1)
strings data.txt | grep "=="


level10
use base64-d to decode the string
cat data.txt | base64 -d


level11
to rotate the character use the tool tr
to rotoate by 13 positions:
cat file_name | tr 'a-z' 'n-za-m' | tr 'A-Z' 'N-ZA-M'
first argument takes the input string format second takes the output format, which here, if a is rotated by 13 positions, it will be come n and goes till z and then starts over from a to m
second pipe is for uppercase characters


level12
we have the hexdump in ascii
not sure but i followed the mktemp -d and did all the changes in the tmp folder
we need to reverse the hexdump. for this we use xxd -r
xxd -r filename.txt newfile
use the file command to get the file signature
then use mv to rename to that extension
for gzip --> .gz
for tar --> .tar
for bzip2 --> .bz2
to uncompress:
.gz --> gunzip filename
.tar --> tar -x -f archivename
.bz2 --> bzip2 filename


level 13
the private key is present in the home directory
we need to use this to login as bandit14 using ssh
the -i is to specify the private key
we can just ssh -p 2220 bandit14@localhost -i sshkey.private to login
info :  the permissions of the private key file should be 700 


level 14
while logged in as bandit14 use nc to send data
nc localhost 30000 and enter level 14's password



level 15
use openssl with s_client to connect to the server
first login and type
openssl s_client -host localhost -port 300001

level 16
run nmap to see the services on the ports
use the version argument and specify the port numbers
nmap -sV -p 31000-32000

then through ncat use ssl option and connect and submit the current level's pwd

level 17
use the diff to compare lines of two files
diff --suppress-common-lines -i -y passwords.old passwords.new
-i is to ignore cases and -y is to display side by side

level 18
after logging in, the .bashrc files automatically logs you out instanstly so pass the command in quotes after the ssh query to execute commands before it logs you out.
ssh -l bandit18 bandit.labs.overthewire.org -p 2220 "cat readme"
first use ls in quotes and we see readme file is present so just cat the readme file

level19
the setuid binary is set to bandit20's user, check the file type of given file.
it says it is an executable so try running it, run it with the example
the euid is set to bandit20, which means this gives the current user the priviges of the creator of the file, so just cat bandit20's password
./bandit2-do cat /etc/bandit_pass/bandit20

level20
the setuid binary makes a connection to localhost on the port you specify as a commandline argument. 
t then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).
to achieve this, we will need to set up a netcat listener to get back the password that the binary is giving, so start netcat server: nc -lvp 1234 (with any port)
we will need to give the password of the current level so we need to echo it and pipe it to nc listener, that way we can send the passoword and recieve it as well.
after this we can run the binary with the port number that we gave the nc listener.
we need to start nc in server mode so -l and -p will be seperate flags
echo "current_level_password" | nc -l -p 5555
this will start the listener immediately, therefore background it, use the & (ampersand symbol)
echo "0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO" | nc -l -p 5555
./suconnect 5555

level21
go to the cron directory to see the cron jobs
we get the path of the script that is being executed, cat the file to see what the script is doing
it is reading the contents of the passwd file and redirecting it to a file in the /tmp directory.
just cat the file
cat /etc/cron.d/cronjob_bandit22
cat /usr/bin/cronjob_bandit22.sh
cat /tmp/whatever_file_the_above_command_gave

level22
print the shell script, since this will run as bandit23, whoami will give bandit23 so to get mytarget value just copy the command and replace myname with bandit23 so it will hash it with bandit23 as the user
just go cat the output in the tmp folder.
echo I am user bandit23 | md5sum | cut -d ' ' -f 1
cat /tmp/output_of_above_command

level23
the script will run as bandit24 and it executes all the files in /var/spool/bandit24/foo/ directory and then deletes after a minute
so we have to write a script to print bandit24's password and save it to a file so that the cron job will execute it
make a temp directory, write the script, give the script 777 permission and the password file 666 permission and copy the script to the above directory
mktemp -d
cd location
cat > script.sh
#!/bin/bash
cat /etc/bandit_pass/bandit24 > password
ctrl + c and then:
chmod 777 script.sh
touch password
chmod 666 password
cp script.sh /var/spool/bandit24/foo/
cat password
wait for a minute to print out the password (idk why but i wasn't getting the password but when i executed the script it said no permission, so the script is alright but idk if there is something else that is wrong, also: try changing permissions of the temp directory so that everybody can write to it

level24
we have to try all possibilities from 0000 to 9999 to get the password of the next level
for this we'll write a script that combines bandit24's pwd and the code with a space in btw and save it to a file
then cat the file and pipe it to nc
the following is the script:
current_pwd="gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8"
for i in {0000..9999}
do
        echo "$current_pwd $i" >> poss.txt
done
the command:
cat possibilities.txt | nc localhost 30002

level25 and 26
this is a little tricky, first let's print out the shell that bandit26 is using by cat /etc/passwd and grep bandit26
it says /usr/bin/showtext
cat /usr/bin/showtext
it uses the more command
use ssh to log in to bandit26 with the ssh private key
we have to resize the window before running so that the more command triggers
then type v to open vim
once vim is opened, you can resize the window, use :shell to open a shell but it isnt working
so we have to set the shell by
:set shell=/bin/bash
and then open the shell by :shell
now print the passwd of bandit26: cat /etc/bandit_pass/bandit26
we see a setuid binary
use it
get the password of bandit27: cat /etc/bandit_pass/bandit27

level27

